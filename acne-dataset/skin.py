{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "439ba501",
   "metadata": {},
   "source": [
    "Install required packages "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "48b624ba",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "/home/amit/SkinCareAI/.venv/lib/python3.12/site-packages/matplotlib/_c_internal_utils.cpython-312-x86_64-linux-gnu.so: invalid ELF header",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mImportError\u001b[39m                               Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[1]\u001b[39m\u001b[32m, line 7\u001b[39m\n\u001b[32m      5\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mlogging\u001b[39;00m\n\u001b[32m      6\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mnumpy\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mnp\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m7\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mmatplotlib\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mpyplot\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mplt\u001b[39;00m\n\u001b[32m      8\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mmatplotlib\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m rcParams\n\u001b[32m      9\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mmatplotlib\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mticker\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m FuncFormatter\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/SkinCareAI/.venv/lib/python3.12/site-packages/matplotlib/__init__.py:161\u001b[39m\n\u001b[32m    157\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mpackaging\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mversion\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m parse \u001b[38;5;28;01mas\u001b[39;00m parse_version\n\u001b[32m    159\u001b[39m \u001b[38;5;66;03m# cbook must import matplotlib only within function\u001b[39;00m\n\u001b[32m    160\u001b[39m \u001b[38;5;66;03m# definitions, so it is safe to import from it here.\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m161\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01m.\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m _api, _version, cbook, _docstring, rcsetup\n\u001b[32m    162\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mmatplotlib\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01m_api\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m MatplotlibDeprecationWarning\n\u001b[32m    163\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mmatplotlib\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mrcsetup\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m cycler  \u001b[38;5;66;03m# noqa: F401\u001b[39;00m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/SkinCareAI/.venv/lib/python3.12/site-packages/matplotlib/cbook.py:32\u001b[39m\n\u001b[32m     29\u001b[39m     \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mnumpy\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m VisibleDeprecationWarning\n\u001b[32m     31\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mmatplotlib\u001b[39;00m\n\u001b[32m---> \u001b[39m\u001b[32m32\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mmatplotlib\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m _api, _c_internal_utils\n\u001b[32m     35\u001b[39m \u001b[38;5;28;01mclass\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01m_ExceptionInfo\u001b[39;00m:\n\u001b[32m     36\u001b[39m \u001b[38;5;250m    \u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m     37\u001b[39m \u001b[33;03m    A class to carry exception information around.\u001b[39;00m\n\u001b[32m     38\u001b[39m \n\u001b[32m   (...)\u001b[39m\u001b[32m     43\u001b[39m \u001b[33;03m    users and result in incorrect tracebacks.\u001b[39;00m\n\u001b[32m     44\u001b[39m \u001b[33;03m    \"\"\"\u001b[39;00m\n",
      "\u001b[31mImportError\u001b[39m: /home/amit/SkinCareAI/.venv/lib/python3.12/site-packages/matplotlib/_c_internal_utils.cpython-312-x86_64-linux-gnu.so: invalid ELF header"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import sys\n",
    "import os\n",
    "import argparse\n",
    "import logging\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import rcParams\n",
    "from matplotlib.ticker import FuncFormatter\n",
    "from matplotlib import cm\n",
    "from matplotlib.colors import Normalize\n",
    "\n",
    "def setup_logging():\n",
    "    logging.basicConfig(\n",
    "        level=logging.INFO,\n",
    "        format='%(asctime)s - %(levelname)s - %(message)s',\n",
    "        handlers=[logging.StreamHandler(sys.stdout)]\n",
    "    )\n",
    "\n",
    "def parse_arguments():\n",
    "    parser = argparse.ArgumentParser(description='Plotting script for data visualization.')\n",
    "    parser.add_argument('input_file', type=str, help='Path to the input CSV file containing data.')\n",
    "    parser.add_argument('--output_file', type=str, default='output.png', help='Path to save the output plot.')\n",
    "    return parser.parse_args()\n",
    "\n",
    "def load_data(input_file):\n",
    "    if not os.path.exists(input_file):\n",
    "        logging.error(f\"Input file {input_file} does not exist.\")\n",
    "        sys.exit(1)\n",
    "    try:\n",
    "        data = pd.read_csv(input_file)\n",
    "        logging.info(f\"Data loaded successfully from {input_file}.\")\n",
    "        return data\n",
    "    except Exception as e:\n",
    "        logging.error(f\"Failed to load data from {input_file}: {e}\")\n",
    "        sys.exit(1)\n",
    "\n",
    "def plot_data(data, output_file):\n",
    "    rcParams['figure.figsize'] = (10, 6)\n",
    "    plt.figure()\n",
    "    \n",
    "    # Assuming the data has 'x' and 'y' columns for plotting\n",
    "    if 'x' not in data.columns or 'y' not in data.columns:\n",
    "        logging.error(\"Data must contain 'x' and 'y' columns for plotting.\")\n",
    "        sys.exit(1)\n",
    "\n",
    "    plt.plot(data['x'], data['y'], marker='o', linestyle='-', color='b', label='Data Line')\n",
    "    plt.title('Data Visualization')\n",
    "    plt.xlabel('X-axis Label')\n",
    "    plt.ylabel('Y-axis Label')\n",
    "    plt.legend()\n",
    "    \n",
    "    plt.grid(True)\n",
    "    plt.tight_layout()\n",
    "    \n",
    "    try:\n",
    "        plt.savefig(output_file)\n",
    "        logging.info(f\"Plot saved to {output_file}.\")\n",
    "    except Exception as e:\n",
    "        logging.error(f\"Failed to save plot: {e}\")\n",
    "        sys.exit(1)\n",
    "    plt.close()\n",
    "def main():\n",
    "    setup_logging()\n",
    "    args = parse_arguments()\n",
    "    \n",
    "    data = load_data(args.input_file)\n",
    "    \n",
    "    plot_data(data, args.output_file)   \n",
    "if __name__ == \"__main__\":\n",
    "    main()\n",
    "\n",
    "# This script is designed to visualize data from a CSV file and save the plot as an image.\n",
    "# It includes error handling, logging, and command-line argument parsing.\n",
    "# Ensure that the input CSV file has 'x' and 'y' columns for the plot to work correctly.\n",
    "# The script can be run from the command line with the input file as an argument.\n",
    "# The output plot will be saved as 'output.png' by default, or a specified file name.\n",
    "# The script uses pandas for data handling and matplotlib for plotting.\n",
    "# The script is structured to be modular, allowing for easy modifications and extensions.\n",
    "# The logging setup provides real-time feedback on the script's execution status.\n",
    "# The script is compatible with Python 3 and requires the pandas and matplotlib libraries.\n",
    "# Ensure you have the required libraries installed:\n",
    "# pip install pandas matplotlib\n",
    "# Usage example: python script.py data.csv --output_file my_plot.png\n",
    "# Replace 'data.csv' with your actual data file path.\n",
    "# The script is designed to be run in a Python environment with access to the command line.\n",
    "# The script is intended for data visualization tasks and can be adapted for various datasets.\n",
    "# The script is a standalone tool for generating plots from CSV data files.\n",
    "# The script can be extended to include more complex plotting features or additional data processing steps.\n",
    "# The script is designed to be user-friendly, with clear error messages and logging.\n",
    "# The script can be integrated into larger data analysis workflows or used independently.\n",
    "# The script is a basic template for data visualization and can be customized as needed.\n",
    "# The script is suitable for quick data exploration and visualization tasks.\n",
    "# The script can be used in data science projects to visualize results from experiments or analyses."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
